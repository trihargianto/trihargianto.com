---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Badge from "./Badge.astro";
import { calculateReadingTime } from "../utils/readingTime";

dayjs.extend(relativeTime);

interface Props {
  post: CollectionEntry<"blog">;
  content: string;
}

const { post, content } = Astro.props;
const { data } = post;
const readingTime = calculateReadingTime(content);
const formattedDate = dayjs(data.pubDate).fromNow();
---

<section class="relative w-full mb-12 overflow-hidden rounded-2xl group">
  <!-- Hero Image with Parallax Effect -->
  <div class="relative h-[400px] md:h-[500px] lg:h-[600px] overflow-hidden">
    {
      data.featured ? (
        <div class="absolute inset-0 transform transition-transform duration-700 group-hover:scale-105">
          <Image
            src={data.featured}
            alt={data.title}
            class="w-full h-full object-cover"
            widths={[400, 800, 1200, 1600]}
            sizes="100vw"
            loading="eager"
            quality={90}
          />
        </div>
      ) : (
        <div class="absolute inset-0 transform transition-transform duration-700 group-hover:scale-105">
          <img
            src={`https://picsum.photos/seed/${data.slug}/1600/900`}
            alt={data.title}
            class="w-full h-full object-cover"
            loading="eager"
          />
        </div>
      )
    }

    <!-- Gradient Overlay for Text Readability -->
    <div
      class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent"
    >
    </div>

    <!-- Content Overlay -->
    <div
      class="absolute inset-0 flex flex-col justify-end p-6 md:p-10 lg:p-12"
    >
      <!-- Category Badge -->
      {
        data.category && (
          <div class="mb-4">
            <Badge className="bg-sky-500 text-white border-0 font-semibold px-4 py-1.5 text-sm">
              {data.category}
            </Badge>
          </div>
        )
      }

      <!-- Title -->
      <h1
        class="text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold text-white mb-4 leading-tight max-w-4xl"
      >
        {data.title}
      </h1>

      <!-- Description -->
      <p
        class="text-lg md:text-xl text-gray-200 mb-6 max-w-3xl leading-relaxed"
      >
        {data.description}
      </p>

      <!-- Meta Information -->
      <div
        class="flex flex-wrap items-center gap-4 md:gap-6 text-sm md:text-base text-gray-300"
      >
        <!-- Reading Time -->
        <div class="flex items-center gap-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-5 h-5"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span>{readingTime.text}</span>
        </div>

        <!-- Publication Date -->
        <div class="flex items-center gap-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-5 h-5"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5"
            ></path>
          </svg>
          <span>{formattedDate}</span>
        </div>

        <!-- Tags -->
        {
          data.tags && data.tags.length > 0 && (
            <div class="flex items-center gap-2 flex-wrap">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="w-5 h-5"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"
                />
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M6 6h.008v.008H6V6z"
                />
              </svg>
              {data.tags.slice(0, 3).map((tag) => (
                <span class="text-gray-300">#{tag}</span>
              ))}
            </div>
          )
        }
      </div>

      <!-- Read Article Button -->
      <div class="mt-6">
        <a
          href={`/blog/${data.slug}`}
          class="inline-flex items-center gap-2 bg-white text-gray-900 font-semibold px-6 py-3 rounded-lg hover:bg-gray-100 transition-colors duration-200 group/button"
          aria-label={`Read article: ${data.title}`}
        >
          <span>Read Article</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="2"
            stroke="currentColor"
            class="w-5 h-5 transition-transform duration-200 group-hover/button:translate-x-1"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3"></path>
          </svg>
        </a>
      </div>
    </div>
  </div>

  <!-- Optional: Image Credit -->
  {
    data.featuredSource && (
      <div class="absolute top-4 right-4 text-xs text-white/70 bg-black/30 backdrop-blur-sm px-3 py-1.5 rounded-full">
        Photo by{" "}
        {data.featuredSourceUrl ? (
          <a
            href={data.featuredSourceUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="underline hover:text-white transition-colors"
          >
            {data.featuredSource}
          </a>
        ) : (
          data.featuredSource
        )}
      </div>
    )
  }
</section>

<style>
  /* Parallax effect using CSS transform */
  @media (prefers-reduced-motion: no-preference) {
    .group:hover .absolute.inset-0.transform {
      transform: scale(1.05);
    }
  }
</style>
